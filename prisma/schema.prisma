// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Researchers and experiment creators
model Experimenters {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  created_at  DateTime     @default(now())
  experiments Experiment[]

  @@map("experimenters")
}

// Main experiment configuration
model Experiment {
  id             Int           @id @default(autoincrement())
  name           String
  description    String 
  isActive       Boolean       @default(false)

  experimenter   Experimenters @relation(fields: [experimenterId], references: [id], onDelete: Cascade)
  experimenterId Int

  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  conditions     Condition[]
  sessions       PlayerSession[]
  sessionOrders  SessionExperimentOrder[]
  puzzleOrders   SessionPuzzleOrder[]

  @@map("experiments")
}

// Different experimental conditions (control, treatment groups, etc.)
model Condition {
  id             Int           @id @default(autoincrement())
  name           String        // "Control", "With Advice", "High Pressure"
  description    String?       
  
  // Override experiment settings if needed
  adviceformat   String?       
  timerEnabled   Boolean?      
  timeLimit      Int?          
  
  experiment     Experiment    @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId   Int
  
  order          Int           // Display order in the experiment
  
  created_at     DateTime      @default(now())
  
  puzzles        Puzzle[]      
  sessionOrders  SessionExperimentOrder[]
  puzzleOrders   SessionPuzzleOrder[]
  
  @@unique([experimentId, order])
  @@unique([experimentId, name])
  @@map("conditions")
}

// Tracks which condition order each player gets
model SessionExperimentOrder {
  id           Int        @id @default(autoincrement())
  player_Name  String
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  condition    Condition  @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId  Int        
  order        Int        // Position in rotation sequence

  created_at   DateTime   @default(now())

  @@unique([player_Name, experimentId, order])
  @@map("session_experiment_orders")
}

// Tracks puzzle rotation order for counterbalancing
model SessionPuzzleOrder {
  id           Int        @id @default(autoincrement())
  player_Name  String
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  condition    Condition  @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId  Int
  puzzle       Puzzle     @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId     Int
  order        Int        // Rotated position within condition

  created_at   DateTime   @default(now())

  @@unique([player_Name, experimentId, conditionId, puzzleId])
  @@unique([player_Name, experimentId, conditionId, order])
  @@map("session_puzzle_orders")
}

// Chess puzzles for each condition
model Puzzle {
  id           Int       @id @default(autoincrement())
  fen          String    // Chess position in standard notation
  correct_move String    // The best move solution
  order        Int       // Original order within condition

  condition    Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId  Int

  advice       Advice?
  responses    PlayerResponse[]
  puzzleOrders SessionPuzzleOrder[]

  @@unique([conditionId, order])
  @@map("puzzles")
}

// AI advice provided for puzzles
model Advice {
  id           Int     @id @default(autoincrement())
  puzzle       Puzzle  @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId     Int     @unique

  text         String
  confidence   Float?     // Confidence score from 0.0 to 1.0
  explanation  String?    
  reliability  String     // "Poor", "Moderate", "High"

  @@map("advice")
}

// Individual participant session
model PlayerSession {
  id             Int       @id @default(autoincrement())
  player_name    String
  experiment     Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId   Int
  conditionId    Int?      // Current condition being played

  display_level  Int       // Current level in the experiment
  started_at     DateTime  @default(now())
  completed_at   DateTime?

  responses      PlayerResponse[]

  @@unique([player_name, experimentId])
  @@map("player_sessions")
}

// Player's solution attempt for each puzzle
model PlayerResponse {
  id                   Int            @id @default(autoincrement())

  session              PlayerSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId            Int
  puzzle               Puzzle         @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId             Int

  move_before_advice   String?        // Initial move before seeing advice
  time_before_advice   Int?           // Time spent before advice shown
  move_after_advice    String?        // Final submitted move
  time_after_advice    Int?           // Additional time after seeing advice

  advice_shown         Boolean        @default(false)
  advice_requested     Boolean        @default(false)
  move_matches_advice  Boolean        @default(false)

  undo_used            Boolean        @default(false)
  time_exceeded        Boolean        @default(false)
  skipped              Boolean        @default(false)

  completed_at         DateTime       @default(now())

  moves                MoveRecord[]

  @@unique([sessionId, puzzleId])
  @@map("player_responses")
}

// Complete move history during puzzle solving
model MoveRecord {
  id             Int            @id @default(autoincrement())
  response       PlayerResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId     Int

  move           String         // Move like "e4", "Nf3", "O-O"
  move_number    Int            // Sequence number
  time_taken     Int?           // Seconds for this move
  was_undone     Boolean        @default(false)

  created_at     DateTime       @default(now())

  @@map("move_records")
}