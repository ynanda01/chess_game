// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// This is for experimenter profile data

model Experimenters {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  created_at  DateTime     @default(now())
  experiments Experiment[]

  @@map("experimenters")
}

model Experiment {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  conditionName  String        
  adviceformat   String
  timerEnabled   Boolean
  timeLimit      Int?

  experimenter   Experimenters @relation(fields: [experimenterId], references: [id], onDelete: Cascade)
  experimenterId Int

  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  puzzles        Puzzle[]
  sessions       PlayerSession[]
  sessionOrders  SessionExperimentOrder[]

  @@map("experiments")
}




// Randomized Level Order (e.g., Level 1–5)

model SessionExperimentOrder {
  id           Int        @id @default(autoincrement())
  player_Name  String
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  order        Int        // Level number (1–5)

  created_at   DateTime   @default(now())

  @@unique([player_Name, experimentId])
  @@unique([player_Name, order])
  @@map("session_experiment_orders")
}




// Puzzles in an experiment
model Puzzle {
  id           Int       @id @default(autoincrement())
  fen          String    // Chess board state
  correct_move String    // Correct solution
  order        Int       // Order in experiment

  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int

  advice       Advice?
  responses    PlayerResponse[]

  @@unique([experimentId, order])
  @@map("puzzles")
}

// Advice linked to a puzzle
model Advice {
  id           Int     @id @default(autoincrement())
  puzzle       Puzzle  @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId     Int     @unique

  text         String
  confidence   Float?     // Optional confidence %
  explanation  String?    // Optional explanation
  reliability  String     // "Poor", "Moderate", "High"

  @@map("advice")
}

// Player session, no login, just playerName

model PlayerSession {
  id             Int       @id @default(autoincrement())
  player_name    String
  experiment     Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId   Int

  display_level  Int       // Level number (1–5)
  started_at     DateTime  @default(now())
  completed_at   DateTime?

  responses      PlayerResponse[]

  @@unique([player_name, experimentId])
  @@map("player_sessions")
}

// Player’s responses to puzzles during a session

model PlayerResponse {
  id                   Int            @id @default(autoincrement())

  session              PlayerSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId            Int
  puzzle               Puzzle         @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId             Int

  move_before_advice   String?        // Optional
  time_before_advice   Int?           // In seconds
  move_after_advice    String         // Final move submitted
  time_after_advice    Int?           // In seconds

  advice_shown         Boolean        @default(false)
  advice_requested     Boolean        @default(false)
  move_matches_advice  Boolean        @default(false)

  undo_used            Boolean        @default(false)
  time_exceeded        Boolean        @default(false)
  skipped              Boolean        @default(false)

  completed_at         DateTime       @default(now())

  moves                MoveRecord[]   // Full move history

  @@unique([sessionId, puzzleId])
  @@map("player_responses")
}

model MoveRecord {
  id             Int            @id @default(autoincrement())
  response       PlayerResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId     Int

  move           String         // Algebraic move e.g., e2e4
  move_number    Int            // Order in sequence: 1, 2, 3...
  time_taken     Int?           // Time in seconds
  was_undone     Boolean        // True if undone later

  created_at     DateTime       @default(now())
}